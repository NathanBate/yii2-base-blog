{% extends "_layouts/admin_layout.twig" %}

{% block content %}

    {% include "_partials/adminPageOpen.twig" %}

    <style>
        /* CHECKBOX TOGGLE SWITCH */
        /* @apply rules for documentation, these do not work as inline style */
        .toggle-checkbox:checked {
            @apply: right-0 border-green-400;
            right: 0;
            border-color: #68D391;
        }
        .toggle-checkbox:checked + .toggle-label {
            @apply: bg-green-400;
            background-color: #68D391;
        }
    </style>

    {% set breadcrumbs = {
        SecondLevel : { Label: 'Update Post', Link: ''}
    } %}
    {% include "_partials/breadcrumbs.twig" %}

    <div id="updatePost" class="relative z-10">

        {# Post Saved - Message #}
        <div v-if="showSavedMessage" class="absolute w-full" style="top:-60px;">
            <div class="flex">
                <div class=" bg-red-600 text-white font-bold px-4 py-2 m-auto">
                    <p>Post Saved</p>
                </div>
            </div>
        </div>

        <div class="flex w-full">
            <div class="mb-2">
                {% set adminPageTitle = "Update Post" %}
                {% include"_partials/adminPageHeading.twig" %}
            </div>
            <div class="flex-auto"></div>
            <div class="flex flex-col md:flex-row">
                <div class="mb-4 md:mb-0 pr-2">
                    <a class="{% include "_styles/blueButton.twig" %}" @click.prevent="savePost(true)">Save</a>
                </div>
                <div>
                    <a class="{% include "_styles/blueButton.twig" %}" @click.prevent="savePost()">Save & Exit</a>
                </div>
            </div>
        </div>

        <div class="mb-8 flex">
            <div class="m-auto pr-2 cursor-pointer" @click="openPicker"><svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000"><g><rect fill="none" height="24" width="24"/></g><g><path d="M19,4h-1V2h-2v2H8V2H6v2H5C3.89,4,3.01,4.9,3.01,6L3,20c0,1.1,0.89,2,2,2h14c1.1,0,2-0.9,2-2V6C21,4.9,20.1,4,19,4z M19,20 H5V10h14V20z M9,14H7v-2h2V14z M13,14h-2v-2h2V14z M17,14h-2v-2h2V14z M9,18H7v-2h2V18z M13,18h-2v-2h2V18z M17,18h-2v-2h2V18z"/></g></svg></div>
            <vuejs-datepicker ref="datePickerComponent" calendar-button="true" calendar-button-icon="fa fa-calendar" v-model="date"></vuejs-datepicker>
            <div class="flex-auto"></div>
        </div>


        <!-- Post Title -->
        <div class="relative mb-4 flex flex-col sm:flex-row">
            <div class="flex-auto">
                <label class="block text-gray-700 text-sm font-bold uppercase mb-2" for="title">Title</label>
                <input
                        class="{% include "_styles/textBox.twig" %}"
                        id="title"
                        type="text"
                        name="title"
                        v-model="title"
                        required
                />
            </div>

            <div class="flex-shrink px-4 pt-8">
                <div class="relative inline-block w-10 mr-2 align-middle select-none transition duration-200 ease-in">
                    <input type="checkbox" v-model="published" name="toggle" id="toggle" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"/>
                    <label for="toggle" class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"></label>
                </div>
                <label for="toggle" class="text-xs text-gray-700">Published?</label>
            </div>
        </div>


        <div>
            <label class="block text-gray-700 text-sm font-bold uppercase mb-2" for="preview">Post Preview Text</label>
            <textarea
                    class="{% include "_styles/textBox.twig" %}"
                    id="preview"
                    name="preview"
                    v-model="preview"
                    rows="5"
            ></textarea>
        </div>


        <div v-for="(element, elementId) in pageElements" :key="'element-'+elementId" class="my-4">
            <div v-if="element.type === 'heading'">
                {% set elementType = "Heading" %}
                {% include "_partials/postElement.twig" %}
            </div>
            <div v-if="element.type === 'editor'">
                {% set elementType = "Editor" %}
                {% include "_partials/postElement.twig" %}
            </div>

            <div v-if="element.type === 'picture'">
                {% set elementType = "Picture" %}
                {% include "_partials/postElement.twig" %}
            </div>

        </div>

        <div class="flex my-4">
            <div
                    class="px-4 py-2 mr-2 cursor-pointer font-bold bg-blue-300 border-blue-800"
                    @click="createElement('heading')"
            >
                + Heading
            </div>

            <div
                    class="px-4 py-2 mr-2 cursor-pointer font-bold bg-blue-300 border-blue-800"
                    @click="createElement('editor')"
            >
                + Editor
            </div>

            <div
                    class="px-4 py-2 mr-2 cursor-pointer font-bold bg-blue-300 border-blue-800"
                    @click="createElement('picture')"
            >
                + Picture
            </div>
        </div>



    </div>

    {% include "_partials/adminPageClose.twig" %}
{% endblock %}


{% block vuejs %}

    <script src="https://cdn.quilljs.com/1.3.4/quill.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.4/dist/vue-quill-editor.js"></script>
    <link href="https://cdn.quilljs.com/1.3.4/quill.core.css" rel="stylesheet">
    <link href="https://cdn.quilljs.com/1.3.4/quill.snow.css" rel="stylesheet">
    <link href="https://cdn.quilljs.com/1.3.4/quill.bubble.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js" integrity="sha256-T/f7Sju1ZfNNfBh7skWn0idlCBcI3RwdLSS4/I7NQKQ=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/vuejs-datepicker"></script>


    <script>

        // Enable navigation prompt
        window.onbeforeunload = function() {
            return true;
        };

        let updatePostApp = new Vue({
            name: 'updatePost',
            el: '#updatePost',
            delimiters: ['%%','%%'],
            components: {
                LocalQuillEditor: VueQuillEditor.quillEditor,
                'vuejs-datepicker': vuejsDatepicker
            },
            computed: {},
            data: {
                file: ``,
                editorOption: {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            ['bold', 'italic', 'underline', 'strike'],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                            [{ 'color': [] }, { 'background': [] }],
                            [{ 'font': [] }],
                            [{ 'align': [] }],
                            ['link'],
                        ]
                    },
                },
                pageElements: { {% include "_partials/pageElementsTwigLoop.twig" %} },
                objectIndex: {{ post.elements | length }},
                title: `{{ post.title }}`,
                postId: {{ post.id }},
                date: new Date(Date.parse('{{ post.date }}')),
                published: {% if post.published == 'N' %}false{% else %}true{% endif %},
                preview: `{{ post.preview }}`,
                showSavedMessage: false
            },
            methods: {
                createElement(type) {
                    this.$set(this.pageElements, Object.keys(this.pageElements).length, {
                        type: type,
                        data: ``,
                        elementId: this.objectIndex,
                        order : this.objectIndex,
                        render: false,
                        id: -1,
                        post: {{ post.id }},
                    })
                },
                swapElements(elementId, direction) {

                    console.log("direction: " + direction)
                    let otherEl = -1
                    let currentEl = elementId
                    if (direction === 'up') {
                        otherEl = elementId - 1
                    } else {
                        otherEl = parseInt(elementId) + 1
                    }

                    console.log("other el " + otherEl)
                    console.log("current el " + currentEl)
                    let tempObj = this.pageElements[otherEl]

                    let otherObjectOrder = this.pageElements[otherEl].order
                    console.log(this.pageElements[otherEl].data + " original order " + otherObjectOrder)

                    let currentObjectOrder = this.pageElements[currentEl].order
                    console.log(this.pageElements[currentEl].data + " original order " + currentObjectOrder)

                    this.pageElements[otherEl] = this.pageElements[currentEl]
                    this.pageElements[otherEl].order = otherObjectOrder

                    this.pageElements[currentEl] = tempObj
                    this.pageElements[currentEl].order = currentObjectOrder

                },
                savePost(stayOnPage = false) {
                    let postPayload = {
                            title: this.title,
                            published: this.published === true ? 'Y' : 'N',
                            preview: this.preview,
                            date: this.date.toISOString().split('T')[0],
                            elements: this.pageElements
                    }
                    console.log("post payload");
                    console.log(JSON.stringify(postPayload))

                    axios.post("{{ site_url }}api/post/update/{{ post.id }}", postPayload).then(savePostResponse => {
                        if (savePostResponse.data.success === true) {
                            if (stayOnPage === false) {
                                // Remove navigation prompt
                                window.onbeforeunload = null;
                                location.href = "{{ site_url }}admin/dashboard";
                            } else {

                                this.reloadElements()
                                this.showSavedMessage = true
                                setTimeout( () => {
                                    this.showSavedMessage = false;
                                }, 2000); // hide the message after 3 seconds
                            }
                        }
                    })
                }, // save post
                handleFileUpload(e, elementId) {
                    this.file = e.target.files[0];
                    let formData = new FormData();
                    formData.append('fileUpload', this.file);
                    formData.append('postId', this.postId);
                    formData.append('order', this.pageElements[elementId].order)
                    let header = {
                        headers: {
                            'Content-Type': 'multipart/form-data'
                        }
                    }
                    axios.post( '{{ site_url }}api/files/upload', formData, header
                    ).then( response => {
                        if (response.data.success === true) {
                            console.log('success');
                            console.log("assetId: " + response.data.assetId);
                            console.log("elementId: " + response.data.elementId);
                            this.pageElements[elementId].data = response.data.assetId;
                            this.pageElements[elementId].id = response.data.elementId;
                        } else {
                            console.log("failure: " + response.data.message)
                        }

                    })
                    .catch(function(){
                        console.log('FAILURE!!');
                    });
                }, // function handle file upload
                reloadElements() {
                    axios.get("{{ site_url }}api/post/get-post/" + this.postId).then (getResponse => {
                        if (getResponse.data.success === true) {
                            let newPageElements = {};
                            if (getResponse.data.data.hasOwnProperty("elements")) {
                                if (getResponse.data.data.elements.length > 0) {
                                    let i = 0;
                                    getResponse.data.data.elements.forEach( e => {

                                        let obj = {
                                            type: e.type,
                                            data: e.data,
                                            elementId: i,
                                            order : i,
                                            render: false,
                                            id: e.id,
                                            post: {{ post.id }},
                                        }
                                        newPageElements[i] = obj;
                                        i++
                                    })
                                }
                            }
                            this.pageElements = newPageElements
                        }
                    });
                },
                trashElement(elementIndex) {

                    if (this.pageElements[elementIndex].id === -1) {
                        Vue.delete(this.pageElements, elementIndex)
                    } else {
                        payload = {
                            elementId: this.pageElements[elementIndex].id,
                            postId: this.postId
                        }

                        axios.post("{{ site_url }}api/post/trash-element", payload).then( response => {
                            if (response.data.success === true) {
                                this.reloadElements()
                            }
                        });
                    }
                }, // function trash element
                openPicker() {
                    this.$refs.datePickerComponent.showCalendar();
                }, // function open picker

            },
            created() {},
        })

    </script>



{% endblock %}